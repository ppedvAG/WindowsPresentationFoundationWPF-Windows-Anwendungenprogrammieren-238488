<Window x:Class="M015.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:M015"
		xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        Title="MainWindow" Height="450" Width="300"
		DataContext="{Binding RelativeSource={RelativeSource Self}}"
		WindowStartupLocation="CenterScreen">
    <StackPanel>
		<!--Commands-->
		<!--Funktionen von Events in ein dediziertes Command Objekt auslagern-->
		<!--Interface ICommand-->
		
		<!--Click Events sind in dieser Form in MVVM nicht einfach möglich-->
		<Button Click="Button_Click" Content="Nichts"/>

		<!--Mittels Command kann ein Click Event MVVM konform gestaltet werden-->
		<!--Über CanExecute wird vollautomatisch IsEnabled gesteuert-->
		<Button Command="{Binding Exit}" Content="Exit"/>
		
		<!--Über Bindings kann die gesamte UI Logik von der Business Logik getrennt werden-->
		
		<!--Wenn eine CheckBox aktiviert ist, soll ein Button aktiviert werden-->
		<!--Hier wird ein CommandParameter benötigt, über diesen können beliebige Daten zum Command geliefert werden-->
		<CheckBox x:Name="CB"
				  IsChecked="True"
				  Content="Button aktivieren"
				  Command="{Binding Check}"
				  CommandParameter="{Binding ElementName=CB}"/>
		<Button Content="Parameter Test"/>

		<!--Commands bei z.B. Enter anhängen-->
		<TextBox x:Name="TB">
			<TextBox.InputBindings>
				<KeyBinding Key="Return"
							Command="{Binding Custom}"
							CommandTarget="{Binding TB}"/>
				<MouseBinding MouseAction="LeftDoubleClick" Command="{Binding Custom}"/>
			</TextBox.InputBindings>
		</TextBox>

		<!--Commands bei z.B. Enter anhängen-->
		<TextBox>
			<b:Interaction.Triggers>
				<b:EventTrigger EventName="MouseDoubleClick">
					<b:InvokeCommandAction Command="{Binding Exit}"/>
				</b:EventTrigger>
			</b:Interaction.Triggers>
			<!--<TextBox.Style>
				<Style TargetType="TextBox">
					<Style.Triggers>
						<EventTrigger RoutedEvent="MouseDoubleClick">
							<EventTrigger.Actions>
								<b:InvokeCommandAction Command="{Binding Custom}"/>
							</EventTrigger.Actions>
						</EventTrigger>
					</Style.Triggers>
				</Style>
			</TextBox.Style>-->
		</TextBox>
	</StackPanel>
</Window>
