<Window x:Class="M006.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:M006"
		xmlns:conv="clr-namespace:M006.Converter"
		xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        Title="MainWindow" Height="450" Width="300"
		WindowStartupLocation="CenterScreen"
		Background="{StaticResource YellowBrush}"> <!--Background von ResourceDictionary-->
	<Window.Resources>
		<!--Für alle Elemente im Window-->
		<SolidColorBrush Color="Red" x:Key="Foreground1"/>
		<LinearGradientBrush StartPoint="1, 0" x:Key="RainbowBackground">
			<GradientStop Color="LightGreen" Offset="0"/>
			<GradientStop Color="Aqua" Offset="0.5"/>
			<GradientStop Color="Violet" Offset="1"/>
		</LinearGradientBrush>
		<!--Namespaces-->
		<!--Namespaces in XAML müssen immer mit xmlns:[Name] angegeben werden-->
		<!--Vorallem wichtig bei Converter, Validierung, MVVM-->
		<conv:DoubleToMarginTopConverter x:Key="DM"/>
		<sys:Double x:Key="FontSize">40</sys:Double> <!--Um Basisdatentypen anzulegen, muss der Wert zwischen den XML Tags angegeben werden-->
		<sys:DayOfWeek x:Key="Wochenanfang">Friday</sys:DayOfWeek>
	</Window.Resources>
    <StackPanel>
		<StackPanel.Resources>
			<!--Lokal für alle Elemente innerhalb des StackPanels-->
			<Style TargetType="Button" x:Key="BtnStyle">
				<!--WICHTIG: TargetType angeben-->
				<!--Setter sind die Eigenschaften die verändert werden sollen-->
				<!--Bestehen immer aus Property und Value-->
				<Setter Property="Background" Value="Aqua"/>
				<Setter Property="FontSize" Value="20"/>
			</Style>
		</StackPanel.Resources>
		
		<!--Resourcen-->
		<!--Verschiedene Objekte statisch speichern-->
		<!--Im jetztigen Element, im Window/UserControl, in Application (global), in einer Bibliothek (extern)-->
		
		<!--Resourcen können jedes beliebige C# Objekt sein-->
		<!--z.B. Converter, Style, SolidColorBrush, double, int, ...-->
		<!--Alle Resourcen müssen einen Key haben, über diesen Key können die Resourcen dann in UI Elementen eingebunden werden-->

		<!--Über StaticResource [Key] kann eine Resource angegriffen werden-->
		<!--StaticResource: Statische Einbindung der Resource zur Erstellung der UI Komponente-->
		<!--DynamicResource: Dynamische Verknüpfung mit der Resource. Wenn sich die Resource zur Laufzeit verändert, wird hier der Button angepasst-->
		<!--x:Static: Statischer Zugriff auf normale Variablen wie im Backend, z.B. [Enum].[Wert], MainWindow.Test-->
		<Button Background="{StaticResource ResourceKey=RainbowBackground}"
				Foreground="{StaticResource Foreground1}"
				FontSize="{DynamicResource FontSize}"
				Width="{x:Static local:MainWindow.Test}"
				Content="Text"
				Click="Button_Click"/>
		
		<!--In WPF gibt es keine Möglichkeit ein Enum an einen Listentyp anzubinden-->
		<!--Lösung: Markup Extension-->
		
		<!--Aufgabe: Standardwochentag über Resource festlegen-->
		<ComboBox Name="Wochentage" SelectedItem="{StaticResource Wochenanfang}"/>
	
		
		
		<!--Styles-->
		<!--Ermöglichen, das Bearbeiten von Komponenten mit einem zentralen Objekt-->
		<Button Content="Test">
			<Button.Style>
				<Style TargetType="Button"> <!--WICHTIG: TargetType angeben-->
					<!--Setter sind die Eigenschaften die verändert werden sollen-->
					<!--Bestehen immer aus Property und Value-->
					<Setter Property="Background" Value="Aqua"/>
					<Setter Property="FontSize" Value="30"/>
				</Style>
			</Button.Style>
		</Button>

		<Button Content="Test" Style="{StaticResource BtnStyle}"/>
		<Button Content="Test" Style="{StaticResource BtnStyle}"/>
		<Button Content="Test" Style="{StaticResource BtnStyle}"/>
		
		<!--Dieser Button wird durch den globalen Style in App.xaml gefärbt-->
		<Button Content="Test"/>
	</StackPanel>
</Window>
